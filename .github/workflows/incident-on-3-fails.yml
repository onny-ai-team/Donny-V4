name: Incident on 3 Smoke Fails

on:
  workflow_run:
    workflows: ["Smoke (Acceptance)"]
    types: [completed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  track:
    runs-on: ubuntu-latest
    steps:
      - name: Find associated PR for this SHA (safe)
        id: find
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { owner, repo } = context.repo;
              const sha = context.payload.workflow_run.head_sha;
              const prs = await github.request('GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls', {
                owner, repo, commit_sha: sha,
                headers: { 'X-GitHub-Api-Version': '2022-11-28' }
              });
              const numbers = prs.data.map(p => p.number);
              core.setOutput('pr', numbers[0] || '');
              core.setOutput('sha', sha);
              core.setOutput('run_html', context.payload.workflow_run.html_url);
            } catch (e) {
              core.info('PR lookup failed; exiting gracefully.');
              core.setOutput('pr', '');
            }

      - name: Stop if no PR (graceful)
        if: ${{ steps.find.outputs.pr == '' }}
        run: echo "No PR for this SHA; exiting 0."

      - name: Install jq
        if: ${{ steps.find.outputs.pr != '' }}
        continue-on-error: true
        run: |
          sudo apt-get update || true
          sudo apt-get install -y jq || true

      - name: Authenticated checkout (lab)
        if: ${{ steps.find.outputs.pr != '' }}
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          ref: lab
          fetch-depth: 0
          persist-credentials: true

      - name: Ensure gate-state branch exists (create if missing)
        if: ${{ steps.find.outputs.pr != '' }}
        continue-on-error: true
        run: |
          set +e
          if git ls-remote --exit-code origin gate-state >/dev/null 2>&1; then
            git fetch origin gate-state --depth=1 || true
            git checkout -B gate-state origin/gate-state || true
          else
            git checkout --orphan gate-state || true
            find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + || true
            mkdir -p .ops/incidents || true
            git add -A || true
            git -c user.name='gate-bot' -c user.email='gate-bot@users.noreply.github.com' \
              commit -m "chore: init gate-state" || true
            git push -u origin gate-state || true
          fi
          echo "gate-state ready"

      - name: Update fail counter for this PR
        id: count
        if: ${{ steps.find.outputs.pr != '' }}
        continue-on-error: true
        env:
          PR_NUM: ${{ steps.find.outputs.pr }}
          SHA: ${{ steps.find.outputs.sha }}
          CONCLUSION: ${{ github.event.workflow_run.conclusion }}
          RUN_HTML: ${{ steps.find.outputs.run_html }}
        run: |
          set +e
          mkdir -p .ops/incidents
          FILE=".ops/incidents/pr-${PR_NUM}.json"

          # read existing
          COUNT=0
          RUNS="[]"
          if [ -f "$FILE" ]; then
            COUNT=$(jq -r '.count // 0' "$FILE" 2>/dev/null || echo 0)
            RUNS=$(jq -c '.runs // []' "$FILE" 2>/dev/null || echo "[]")
          fi

          # update counter
          if [ "$CONCLUSION" = "failure" ]; then COUNT=$((COUNT+1)); else COUNT=0; fi

          # keep last 3 run URLs
          printf '%s' "$RUNS" >/tmp/runs.json
          jq --arg url "$RUN_HTML" '. + [$url] | (length>3 ? .[-3:] : .)' /tmp/runs.json 2>/dev/null >/tmp/runs2.json || echo '[]' >/tmp/runs2.json

          jq -n --arg pr "$PR_NUM" --arg sha "$SHA" --argjson count "$COUNT" \
                --slurpfile runs /tmp/runs2.json \
                '{pr: ($pr|tonumber), sha: $sha, count: $count, runs: $runs[0], updatedAt: (now|todate)}' > "$FILE" || \
                echo "{\"pr\":$PR_NUM,\"sha\":\"$SHA\",\"count\":$COUNT,\"runs\":[],\"updatedAt\":\"$(date -u +%FT%TZ)\"}" > "$FILE"

          echo "count=$COUNT" >> $GITHUB_OUTPUT
          echo "Updated counter for PR #${PR_NUM} to $COUNT (conclusion=$CONCLUSION)"

      - name: Commit counter (non-fatal)
        if: ${{ steps.find.outputs.pr != '' }}
        continue-on-error: true
        run: |
          set +e
          git add .ops/incidents/ || true
          git -c user.name='gate-bot' -c user.email='gate-bot@users.noreply.github.com' \
            commit -m "gate(incident): update fail counter" || true
          git push origin gate-state || true
          echo "counter committed (or no changes)"

      - name: Open Incident issue at exactly 3 fails
        if: ${{ steps.count.outputs.count == 3 && steps.find.outputs.pr != '' }}
        continue-on-error: true
        uses: actions/github-script@v7
        env:
          PR_NUM: ${{ steps.find.outputs.pr }}
          SHA: ${{ steps.find.outputs.sha }}
          RUN_HTML: ${{ steps.find.outputs.run_html }}
        with:
          script: |
            try {
              const { owner, repo } = context.repo;
              const prNum = Number(process.env.PR_NUM);
              const sha = (process.env.SHA || '').slice(0,7);
              const runUrl = process.env.RUN_HTML || '';

              const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNum });
              const author = pr.data.user.login;

              const body = [
                `‚ö†Ô∏è **Lab Gate Incident** ‚Äî 3 consecutive Smoke failures`,
                ``,
                `**PR:** #${prNum} (@${author})`,
                `**SHA:** \`${sha}\``,
                `**Latest run:** ${runUrl}`,
                `**Doctor Pack:** http://99.76.234.25:5056/lab/api/packs/latest`,
                ``,
                `**Next steps**`,
                `- [ ] Investigate failing endpoint/logs`,
                `- [ ] Fix and push`,
                `- [ ] Confirm gate is green`,
              ].join('\n');

              const issue = await github.rest.issues.create({
                owner, repo,
                title: `Lab Gate Incident: PR #${prNum} (${sha})`,
                body,
                labels: ['incident','smoke-failure','automated']
              });

              await github.rest.issues.createComment({
                owner, repo, issue_number: prNum,
                body: `üö® Incident opened: #${issue.data.number} ‚Äî 3 consecutive Smoke failures.`
              });
              core.info(`Incident #${issue.data.number} opened.`);
            } catch (e) {
              core.warning('Incident creation skipped: ' + String(e));
            }

      - name: Always exit 0
        run: echo "Done."
