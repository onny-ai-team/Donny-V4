name: Incident on 3 Smoke Fails

on:
  workflow_run:
    workflows: ["Smoke (Acceptance)"]
    types: [completed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  track:
    runs-on: ubuntu-latest
    steps:
      - name: Find associated PR for this SHA
        id: find
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.payload.workflow_run.head_sha;
            const prs = await github.request('GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls', {
              owner, repo, commit_sha: sha,
              headers: { 'X-GitHub-Api-Version': '2022-11-28' }
            });
            const numbers = prs.data.map(p => p.number);
            core.setOutput('pr', numbers[0] || '');
            core.setOutput('sha', sha);
            core.setOutput('run_html', context.payload.workflow_run.html_url);

      - name: Stop if no PR (e.g., direct push)
        if: ${{ steps.find.outputs.pr == '' }}
        run: echo "No PR for this SHA; nothing to track."

      - name: Install jq
        if: ${{ steps.find.outputs.pr != '' }}
        run: sudo apt-get update && sudo apt-get install -y jq

      # Use authenticated checkout with built-in GITHUB_TOKEN
      - name: Checkout gate-state (create if missing)
        if: ${{ steps.find.outputs.pr != '' }}
        uses: actions/checkout@v4
        with:
          ref: gate-state
          fetch-depth: 0
          persist-credentials: true  # uses GITHUB_TOKEN

      - name: Init gate-state when missing
        if: ${{ steps.find.outputs.pr != '' }}
        run: |
          set -e
          if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
            echo "Initializing gate-state branch"
            rm -rf ./*
            mkdir -p .ops/incidents
            git add -A
            git -c user.name='gate-bot' -c user.email='gate-bot@users.noreply.github.com' commit -m "chore: init gate-state"
            git push -u origin HEAD:gate-state
          fi

      - name: Update fail counter for this PR
        id: count
        if: ${{ steps.find.outputs.pr != '' }}
        env:
          PR_NUM: ${{ steps.find.outputs.pr }}
          SHA: ${{ steps.find.outputs.sha }}
          CONCLUSION: ${{ github.event.workflow_run.conclusion }}
          RUN_HTML: ${{ steps.find.outputs.run_html }}
        run: |
          set -e
          mkdir -p .ops/incidents
          FILE=".ops/incidents/pr-${PR_NUM}.json"

          if [ -f "$FILE" ]; then
            COUNT=$(jq -r '.count // 0' "$FILE")
            RUNS=$(jq -c '.runs // []' "$FILE")
          else
            COUNT=0
            RUNS="[]"
          fi

          if [ "$CONCLUSION" = "failure" ]; then
            COUNT=$((COUNT+1))
          else
            COUNT=0
          fi

          echo "$RUNS" | jq -r '.' > /tmp/runs.json
          jq --arg url "$RUN_HTML" '. + [$url] | (length>3 ? .[-3:] : .)' /tmp/runs.json > /tmp/runs2.json

          jq -n --arg pr "$PR_NUM" --arg sha "$SHA" --argjson count "$COUNT" \
                --slurpfile runs /tmp/runs2.json \
                '{pr: ($pr|tonumber), sha: $sha, count: $count, runs: $runs[0], updatedAt: (now|todate)}' > "$FILE"

          echo "count=$COUNT" >> $GITHUB_OUTPUT

      - name: Commit counter
        if: ${{ steps.find.outputs.pr != '' }}
        run: |
          set -e
          git add .ops/incidents/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git -c user.name='gate-bot' -c user.email='gate-bot@users.noreply.github.com' \
              commit -m "gate(incident): update fail counter for PR #${{ steps.find.outputs.pr }} to ${{ steps.count.outputs.count }}"
            git push origin HEAD:gate-state
          fi

      - name: Open Incident issue at 3 fails
        if: ${{ steps.count.outputs.count >= 3 && steps.find.outputs.pr != '' }}
        uses: actions/github-script@v7
        env:
          PR_NUM: ${{ steps.find.outputs.pr }}
          SHA: ${{ steps.find.outputs.sha }}
          RUN_HTML: ${{ steps.find.outputs.run_html }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNum = Number(process.env.PR_NUM);
            const sha = process.env.SHA;
            const runUrl = process.env.RUN_HTML;

            const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNum });
            const author = pr.data.user.login;

            const body = [
              `‚ö†Ô∏è **Lab Gate Incident** ‚Äî 3 consecutive Smoke failures`,
              ``,
              `**PR:** #${prNum} (@${author})`,
              `**SHA:** \`${sha}\``,
              `**Latest run:** ${runUrl}`,
              `**Doctor Pack:** http://99.76.234.25:5056/lab/api/packs/latest`,
              ``,
              `**Next steps**`,
              `- [ ] Investigate failing endpoint/logs`,
              `- [ ] Fix and push`,
              `- [ ] Confirm gate is green`,
            ].join('\n');

            const issue = await github.rest.issues.create({
              owner, repo,
              title: `Lab Gate Incident: PR #${prNum} (${sha.slice(0,7)})`,
              body,
              labels: ['incident','smoke-failure','automated']
            });

            await github.rest.issues.createComment({
              owner, repo, issue_number: prNum,
              body: `üö® Incident opened: #${issue.data.number} ‚Äî 3 consecutive Smoke failures.`
            });
