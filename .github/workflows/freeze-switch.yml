name: Freeze Toggle

on:
  issues:
    types: [labeled, unlabeled]
  pull_request_target:
    types: [labeled, unlabeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  toggle:
    if: github.event.label.name == 'freeze-lab'
    runs-on: ubuntu-latest
    steps:
      - name: Check PAT configuration
        run: |
          if [ -z "${{ secrets.FREEZE_BOT_PAT }}" ]; then
            echo "::error::‚ùå Missing FREEZE_BOT_PAT (classic PAT). Create a classic token with scope: repo (includes Bypass branch protections). Save as repo secret: FREEZE_BOT_PAT. Then re-apply/remove the freeze-lab label to retry."
            exit 1
          fi
          echo "‚úÖ FREEZE_BOT_PAT is configured"

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.FREEZE_BOT_PAT }}
          ref: lab

      - name: Process freeze toggle
        id: toggle
        uses: actions/github-script@v7
        with:
          script: |
            const action = context.payload.action;
            const actor = context.actor;
            const isFreezing = (action === 'labeled');
            
            const data = {
              frozen: isFreezing,
              reason: isFreezing ? `Label applied to #${context.issue.number}` : '',
              by: isFreezing ? actor : '',
              at: isFreezing ? new Date().toISOString() : ''
            };
            
            const fs = require('fs');
            fs.writeFileSync('.ops/lab-freeze.json', JSON.stringify(data, null, 2));
            
            core.setOutput('frozen', isFreezing);
            core.setOutput('actor', actor);
            core.info(`Lab freeze ${isFreezing ? 'ACTIVATED' : 'DEACTIVATED'} by ${actor}`);

      - name: Commit and push freeze state
        id: push
        continue-on-error: true
        run: |
          git config user.name "freeze-bot"
          git config user.email "freeze-bot@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.FREEZE_BOT_PAT }}@github.com/${{ github.repository }}.git"
          
          # Fetch latest and ensure we're on lab
          git fetch origin lab
          git checkout lab
          
          # Stage and commit the freeze state change
          git add .ops/lab-freeze.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "result=no-changes" >> $GITHUB_OUTPUT
          else
            FROZEN_STATE=$(jq -r .frozen .ops/lab-freeze.json)
            git commit -m "freeze: set to $FROZEN_STATE by ${{ steps.toggle.outputs.actor }}"
            
            # Push with error capture
            if git push origin lab 2>push_error.txt; then
              echo "result=success" >> $GITHUB_OUTPUT
              echo "‚úÖ Push successful"
            else
              echo "result=failed" >> $GITHUB_OUTPUT
              cat push_error.txt
              exit 1
            fi
          fi

      - name: Comment on trigger - Success
        if: steps.push.outcome == 'success' && steps.push.outputs.result != 'no-changes'
        uses: actions/github-script@v7
        with:
          script: |
            const isFreezing = (context.payload.action === 'labeled');
            const body = isFreezing 
              ? `üßä Freeze ENABLED ‚Äî Lab is now frozen.`
              : `üßä Freeze DISABLED ‚Äî Lab is now open.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Comment on trigger - Failure
        if: steps.push.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `‚ùå **Freeze toggle failed**: could not push to protected \`lab\`.\n` +
              `Fix: create classic PAT with scope \`repo\` (includes Bypass branch protections), ` +
              `save as secret \`FREEZE_BOT_PAT\`, then re-apply/remove \`freeze-lab\` to retry.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });