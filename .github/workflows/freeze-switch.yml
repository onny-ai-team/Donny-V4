name: Freeze Toggle

on:
  issues:
    types: [labeled, unlabeled]
  pull_request_target:
    types: [labeled, unlabeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  toggle:
    if: github.event.label.name == 'freeze-lab'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: freeze-state
          fetch-depth: 0

      - name: Process freeze toggle
        id: toggle
        uses: actions/github-script@v7
        with:
          script: |
            const action = context.payload.action;
            const actor = context.actor;
            const isFreezing = (action === 'labeled');
            
            const data = {
              frozen: isFreezing,
              reason: isFreezing ? `Label applied to #${context.issue.number}` : '',
              by: isFreezing ? actor : '',
              at: isFreezing ? new Date().toISOString() : ''
            };
            
            const fs = require('fs');
            fs.writeFileSync('.ops/lab-freeze.json', JSON.stringify(data, null, 2));
            
            core.setOutput('frozen', isFreezing);
            core.setOutput('actor', actor);
            core.info(`Lab freeze ${isFreezing ? 'ACTIVATED' : 'DEACTIVATED'} by ${actor}`);

      - name: Commit and push freeze state
        id: push
        run: |
          git config user.name "freeze-bot"
          git config user.email "freeze-bot@users.noreply.github.com"
          
          # Stage and commit the freeze state change
          git add .ops/lab-freeze.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "result=no-changes" >> $GITHUB_OUTPUT
          else
            FROZEN_STATE=$(jq -r .frozen .ops/lab-freeze.json)
            git commit -m "freeze(state): set to $FROZEN_STATE by ${{ steps.toggle.outputs.actor }}" || echo "No changes"
            
            # Push to freeze-state branch (no protection, no PAT needed)
            git push origin HEAD:freeze-state
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ State updated on branch freeze-state"
          fi

      - name: Comment on trigger - Success
        if: steps.push.outcome == 'success' && steps.push.outputs.result != 'no-changes'
        uses: actions/github-script@v7
        with:
          script: |
            const isFreezing = (context.payload.action === 'labeled');
            const body = isFreezing 
              ? `üßä Freeze ENABLED ‚Äî Lab is now frozen (state updated on branch \`freeze-state\`).`
              : `‚úÖ Freeze DISABLED ‚Äî Lab is now open (state updated on branch \`freeze-state\`).`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Comment on trigger - Failure
        if: steps.push.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `‚ùå **Freeze toggle failed**: could not update state on \`freeze-state\` branch.\n` +
              `Check that the freeze-state branch exists and the workflow has permissions.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Comment on all open PRs about freeze state
        if: steps.push.outcome == 'success' && steps.push.outputs.result != 'no-changes'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const isFreezing = (context.payload.action === 'labeled');
            const state = isFreezing
              ? "üßä Lab is now FROZEN"
              : "‚úÖ Lab is now OPEN";
            
            // List all open PRs targeting lab
            const prs = await github.rest.pulls.list({
              owner, repo, state: "open", base: "lab"
            });
            for (const pr of prs.data) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pr.number,
                body: state
              });
            }
